package com.sqisoft.plantmate.mapper;

import com.sqisoft.plantmate.domain.PlantRecord;
import com.sqisoft.plantmate.domain.PlantRecordFilter.Criteria;
import com.sqisoft.plantmate.domain.PlantRecordFilter.Criterion;
import com.sqisoft.plantmate.domain.PlantRecordFilter;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class PlantRecordSqlProvider {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_plant_record
     *
     * @mbg.generated
     */
    public String countByExample(PlantRecordFilter example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("tb_plant_record");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_plant_record
     *
     * @mbg.generated
     */
    public String deleteByExample(PlantRecordFilter example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("tb_plant_record");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_plant_record
     *
     * @mbg.generated
     */
    public String insertSelective(PlantRecord row) {
        SQL sql = new SQL();
        sql.INSERT_INTO("tb_plant_record");
        
        sql.VALUES("RECORD_ID", "#{id,jdbcType=INTEGER}");
        
        if (row.getPlantId() != null) {
            sql.VALUES("PLANT_ID", "#{plantId,jdbcType=INTEGER}");
        }
        
        if (row.getTitle() != null) {
            sql.VALUES("TITLE", "#{title,jdbcType=VARCHAR}");
        }
        
        if (row.getDate() != null) {
            sql.VALUES("DATE", "#{date,jdbcType=TIMESTAMP}");
        }
        
        if (row.getLength() != null) {
            sql.VALUES("LENGTH", "#{length,jdbcType=INTEGER}");
        }
        
        if (row.getLeafCount() != null) {
            sql.VALUES("LEAF_COUNT", "#{leafCount,jdbcType=INTEGER}");
        }
        
        if (row.getGrowthStatus() != null) {
            sql.VALUES("GROWTH_STATUS", "#{growthStatus,jdbcType=VARCHAR}");
        }
        
        if (row.getWaterSupply() != null) {
            sql.VALUES("WATER_SUPPLY", "#{waterSupply,jdbcType=INTEGER}");
        }
        
        if (row.getSoilType() != null) {
            sql.VALUES("SOIL_TYPE", "#{soilType,jdbcType=VARCHAR}");
        }
        
        if (row.getFertilizerType() != null) {
            sql.VALUES("FERTILIZER_TYPE", "#{fertilizerType,jdbcType=VARCHAR}");
        }
        
        if (row.getTemperature() != null) {
            sql.VALUES("TEMPERATURE", "#{temperature,jdbcType=INTEGER}");
        }
        
        if (row.getHumidity() != null) {
            sql.VALUES("HUMIDITY", "#{humidity,jdbcType=INTEGER}");
        }
        
        if (row.getGrowthContent() != null) {
            sql.VALUES("GROWTH_CONTENT", "#{growthContent,jdbcType=VARCHAR}");
        }
        
        if (row.getRemarks() != null) {
            sql.VALUES("REMARKS", "#{remarks,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_plant_record
     *
     * @mbg.generated
     */
    public String selectByExample(PlantRecordFilter example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("RECORD_ID");
        } else {
            sql.SELECT("RECORD_ID");
        }
        sql.SELECT("PLANT_ID");
        sql.SELECT("TITLE");
        sql.SELECT("DATE");
        sql.SELECT("LENGTH");
        sql.SELECT("LEAF_COUNT");
        sql.SELECT("GROWTH_STATUS");
        sql.SELECT("WATER_SUPPLY");
        sql.SELECT("SOIL_TYPE");
        sql.SELECT("FERTILIZER_TYPE");
        sql.SELECT("TEMPERATURE");
        sql.SELECT("HUMIDITY");
        sql.SELECT("GROWTH_CONTENT");
        sql.SELECT("REMARKS");
        sql.FROM("tb_plant_record");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_plant_record
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        PlantRecord row = (PlantRecord) parameter.get("row");
        PlantRecordFilter example = (PlantRecordFilter) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("tb_plant_record");
        
        if (row.getId() != null) {
            sql.SET("RECORD_ID = #{row.id,jdbcType=INTEGER}");
        }
        
        if (row.getPlantId() != null) {
            sql.SET("PLANT_ID = #{row.plantId,jdbcType=INTEGER}");
        }
        
        if (row.getTitle() != null) {
            sql.SET("TITLE = #{row.title,jdbcType=VARCHAR}");
        }
        
        if (row.getDate() != null) {
            sql.SET("DATE = #{row.date,jdbcType=TIMESTAMP}");
        }
        
        if (row.getLength() != null) {
            sql.SET("LENGTH = #{row.length,jdbcType=INTEGER}");
        }
        
        if (row.getLeafCount() != null) {
            sql.SET("LEAF_COUNT = #{row.leafCount,jdbcType=INTEGER}");
        }
        
        if (row.getGrowthStatus() != null) {
            sql.SET("GROWTH_STATUS = #{row.growthStatus,jdbcType=VARCHAR}");
        }
        
        if (row.getWaterSupply() != null) {
            sql.SET("WATER_SUPPLY = #{row.waterSupply,jdbcType=INTEGER}");
        }
        
        if (row.getSoilType() != null) {
            sql.SET("SOIL_TYPE = #{row.soilType,jdbcType=VARCHAR}");
        }
        
        if (row.getFertilizerType() != null) {
            sql.SET("FERTILIZER_TYPE = #{row.fertilizerType,jdbcType=VARCHAR}");
        }
        
        if (row.getTemperature() != null) {
            sql.SET("TEMPERATURE = #{row.temperature,jdbcType=INTEGER}");
        }
        
        if (row.getHumidity() != null) {
            sql.SET("HUMIDITY = #{row.humidity,jdbcType=INTEGER}");
        }
        
        if (row.getGrowthContent() != null) {
            sql.SET("GROWTH_CONTENT = #{row.growthContent,jdbcType=VARCHAR}");
        }
        
        if (row.getRemarks() != null) {
            sql.SET("REMARKS = #{row.remarks,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_plant_record
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("tb_plant_record");
        
        sql.SET("RECORD_ID = #{row.id,jdbcType=INTEGER}");
        sql.SET("PLANT_ID = #{row.plantId,jdbcType=INTEGER}");
        sql.SET("TITLE = #{row.title,jdbcType=VARCHAR}");
        sql.SET("DATE = #{row.date,jdbcType=TIMESTAMP}");
        sql.SET("LENGTH = #{row.length,jdbcType=INTEGER}");
        sql.SET("LEAF_COUNT = #{row.leafCount,jdbcType=INTEGER}");
        sql.SET("GROWTH_STATUS = #{row.growthStatus,jdbcType=VARCHAR}");
        sql.SET("WATER_SUPPLY = #{row.waterSupply,jdbcType=INTEGER}");
        sql.SET("SOIL_TYPE = #{row.soilType,jdbcType=VARCHAR}");
        sql.SET("FERTILIZER_TYPE = #{row.fertilizerType,jdbcType=VARCHAR}");
        sql.SET("TEMPERATURE = #{row.temperature,jdbcType=INTEGER}");
        sql.SET("HUMIDITY = #{row.humidity,jdbcType=INTEGER}");
        sql.SET("GROWTH_CONTENT = #{row.growthContent,jdbcType=VARCHAR}");
        sql.SET("REMARKS = #{row.remarks,jdbcType=VARCHAR}");
        
        PlantRecordFilter example = (PlantRecordFilter) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_plant_record
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(PlantRecord row) {
        SQL sql = new SQL();
        sql.UPDATE("tb_plant_record");
        
        if (row.getTitle() != null) {
            sql.SET("TITLE = #{title,jdbcType=VARCHAR}");
        }
        
        if (row.getDate() != null) {
            sql.SET("DATE = #{date,jdbcType=TIMESTAMP}");
        }
        
        if (row.getLength() != null) {
            sql.SET("LENGTH = #{length,jdbcType=INTEGER}");
        }
        
        if (row.getLeafCount() != null) {
            sql.SET("LEAF_COUNT = #{leafCount,jdbcType=INTEGER}");
        }
        
        if (row.getGrowthStatus() != null) {
            sql.SET("GROWTH_STATUS = #{growthStatus,jdbcType=VARCHAR}");
        }
        
        if (row.getWaterSupply() != null) {
            sql.SET("WATER_SUPPLY = #{waterSupply,jdbcType=INTEGER}");
        }
        
        if (row.getSoilType() != null) {
            sql.SET("SOIL_TYPE = #{soilType,jdbcType=VARCHAR}");
        }
        
        if (row.getFertilizerType() != null) {
            sql.SET("FERTILIZER_TYPE = #{fertilizerType,jdbcType=VARCHAR}");
        }
        
        if (row.getTemperature() != null) {
            sql.SET("TEMPERATURE = #{temperature,jdbcType=INTEGER}");
        }
        
        if (row.getHumidity() != null) {
            sql.SET("HUMIDITY = #{humidity,jdbcType=INTEGER}");
        }
        
        if (row.getGrowthContent() != null) {
            sql.SET("GROWTH_CONTENT = #{growthContent,jdbcType=VARCHAR}");
        }
        
        if (row.getRemarks() != null) {
            sql.SET("REMARKS = #{remarks,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("RECORD_ID = #{id,jdbcType=INTEGER}");
        sql.WHERE("PLANT_ID = #{plantId,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_plant_record
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, PlantRecordFilter example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}